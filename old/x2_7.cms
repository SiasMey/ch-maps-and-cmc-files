// CMS Script File
//
//     Game Title:	X2
//     Written By:	Abe Beson
//           Date:	17/9-2004
//

%define miniX								js2.a1
%define miniY								js2.a2

%define mode2Button					js2.b4
%define mode3Button					js2.b3
%define	mainTrigger					js1.b1
%define pinky								js1.b4
%define	povUp								js1.b25
%define povRight						js1.b27
%define povDown							js1.b29
%define povLeft							js1.b31

%define mouseWheelOut				cms.a1

%define triggerOut					cms.b1
%define oneOut							cms.b2
%define	twoOut							cms.b3
%define	threeOut						cms.b4
%define fourOut							cms.b5
%define delOut							cms.b6
%define sOut								cms.b7
%define COut								cms.b8
%define enterOut						cms.b9
%define fiveOut							cms.b10
%define miniUpOut						cms.b11
%define miniRightOut				cms.b12
%define	miniDownOut					cms.b13
%define	miniLeftOut					cms.b14

%define doneFirst						b1
%define changeMode					b2
%define inTrigSeq						b3
%define mainInstalled				b4
%define inTurretSeq					b5
%define up									b6
%define right								b7
%define	down								b8
%define left								b9
%define miniCentered				b10
%define inMiniSeq						b11

%define center							127
%define mwMove							126
%define miniLevel						75
script
 
 	if(not doneFirst) then
 		doneFirst=true;
 		currentMode=MODE1;
 		mainInstalled=true;
 		mouseWheelOut=center;
 	endif
 
 	// Mode1 is the normaly active mode
 	// Mode2 is active while button 4 but not button 3 on the 
 	//       throttle is depressed.
 	// Mode3 is active while button 3 but not button 4 on the
 	//       throttle is depressed
 	// Mode4 is entered while button 3 and button 4 on the 
 	//       throttle are both depressed.
 	
 	if(mode2Button && mode3Button) then
 		currentMode=MODE4;
 	else 
 		if(mode2Button) then
 			currentMode=MODE2;
 		else 
 			if(mode3Button) then
 				currentMode=MODE3;
 			else 
 				if(not mode2Button && not mode3Button) then
 					currentMode=MODE1;
 				endif
 			endif
 		endif
 	endif

	sequence
		while(mainTrigger AND NOT inTrigSeq);
 			triggerOut=true;
 	endSequence
 	sequence
 		while(NOT mainTrigger AND NOT inTrigSeq);
 		triggerOut=false;
 	endSequence

 	// change gun
 	sequence
		wait(pinky);
		inTrigSeq=true;
		triggerOut=false;
		delay(2);
		if([currentMode==MODE1]) then
			oneOut=true;
		endif
		if([currentMode==MODE2]) then
			twoOut=true;
		endif
		if([currentMode==MODE3]) then
			threeOut=true;
		endif
		if([currentMode==MODE4]) then
			fourOut=true;
		endif
		delay(2);
		oneOut=false;
		twoOut=false;
		threeOut=false;
		fourOut=false;
		inTrigSeq=false;
 	endSequence

	// Turret command
	sequence
		wait((povUp OR povDown OR povRight OR povLeft) and NOT inTurretSeq);
		inTurretSeq=true;
		up=false;
 		right=false;
 		down=false;
 		left=false;
		if(povUp) then
			up=true;
		endif
		if(povRight) then
			right=true;
		endif
		if(povDown) then
			down=true;
		endif
		if(povLeft) then
			left=true;
		endif
		delOut=true;
		delay(2);
		delOut=false;
		COut=true;
		delay(2);
		COut=false;
		delay(8);
		mouseWheelOut=center-mwMove;
		delay(2);
		mouseWheelOut=center;
		delay(2);
		mouseWheelOut=center-mwMove;
		delay(2);
		mouseWheelOut=center;
		delay(2);
		mouseWheelOut=center-mwMove;
		delay(2);
		mouseWheelOut=center;
		delay(2);
		mouseWheelOut=center-mwMove;
		delay(2);
		mouseWheelOut=center;
		delay(2);
		mouseWheelOut=center-mwMove;
		delay(2);
		mouseWheelOut=center;
		delay(2);
		mouseWheelOut=center-mwMove;
		delay(2);
		mouseWheelOut=center;
		delay(2);
		enterOut=true;
 		delay(2);
		enterOut=false;
 		if(up) then
 			twoOut=true; // Attack all enemies
 		endif
 		if(down) then
 			fiveOut=true; // Attack missile
 		endif
 		if(right) then
 			fourOut=true; // Protect ship
 		endif
 		if(left) then
 			threeOut=true; // Attack target
 		endif 
 		delay(2); 
 		twoOut=false;
 		threeOut=false;
 		fourOut=false;
 		fiveOut=false;
 		delOut=true; 
 		delay(2);
 		delOut=false;
		inTurretSeq=false;
	endSequence
	
	// Program ministick as hat
	sequence
		while([miniY<center+miniLevel] && [miniY>center-miniLevel]
					&& [miniX<center+miniLevel] && [miniX>center-miniLevel]
					&& NOT inMiniSeq);
		miniCentered=true;
		miniUpOut=false;
		miniDownOut=false;
		miniLeftOut=false;
		miniRightOut=false;
	endSequence		
	sequence
		wait([miniY>center+miniLevel] && miniCentered);
		miniCentered=false;
		inMiniSeq=true;
		miniUpOut=true;
		delay(2);
		inMiniSeq=false;
	endSequence
	sequence
		wait([miniX>center+miniLevel] && miniCentered && NOT inMiniSeq);
		miniCentered=false;
		inMiniSeq=true;
		miniRightOut=true;
		delay(2);
		inMiniSeq=false;
	endSequence
	sequence
		wait([miniY<center-miniLevel] && miniCentered && NOT inMiniSeq);
		miniCentered=false;
		inMiniSeq=true;
		miniDownOut=true;
		delay(2);
		inMiniSeq=false;
	endSequence
	sequence
		wait([miniX<center-miniLevel] && miniCentered && NOT inMiniSeq);
		miniCentered=false;
		inMiniSeq=true;
		miniLeftOut=true;
		delay(2);
		inMiniSeq=false;
	endSequence
endScript
